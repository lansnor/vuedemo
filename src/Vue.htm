<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Vue 示例</title>
</head>
<body>
<div id="app">
    <!--
        钩子函数的参数含义如下：
        el: 指令所绑定的元素，可以用来直接操作DOM；
        binding: 一个对象，包含以下属性：
            name: 指令名，不包括v-前缀；
            value: 指令的绑定值，例如v-my-directive="1+1"，value的值是2；
            oldValue: 指令绑定的前一个值，仅在update和componentUpdated钩子中可用。无论值是否改变都可用；
            expression: 绑定值的字符串形式，例如v-my-directive="1+1"，expression的值是"1+1"；
            arg: 传给指令的参数，例如v-my-directive:foo，arg的值是foo；
            modifiers: 一个包含修饰符的对象，例如v-my-directive.foo.bar，修饰符对象modifiers的值是{foo:true, bar:true}。
        vnode: Vue编译生成的虚拟节点；
        oldVnode: 上一个虚拟节点仅在update和componentUpdated钩子中可用；
     -->
    <div v-test:msg.a.b="message"></div>
</div>
<!--	<script src="https://unpkg.com/vue/dist/vue.min.js"></script>	-->
<!-- 开发环境版本，包含了有帮助的命令行警告 -->
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<!-- 生产环境版本，优化了尺寸和速度 -->
<!--<script src="https://cdn.jsdelivr.net/npm/vue"></script>-->
<!--<script src="vue.min.js"></script>-->
<script>
    console.log('start');

    // 全局注册
    Vue.directive('test', {
        // 指令选项
        bind: function (el, binding, vnode) {
            let keys = [];
            for(let i in vnode){
                if(vnode.hasOwnProperty(i)){
                    keys.push(i);
                }
            }

            el.innerHTML =
                'name: ' + binding.name + '<br>' +
                'value: ' + binding.value + '<br>' +
                'expression: ' + binding.expression + '<br>' +
                'argument: ' + binding.arg + '<br>' +
                'modifiers: ' + JSON.stringify(binding.modifiers) + '<br>' +
                'vnode keys: ' + keys.join(', ');
        }
    });

    // vue根实例变量名称可以自定义
    let app = new Vue({
        el: '#app', // 指定一个页面中已存在的DOM元素来挂载Vue实例，它可以是HTMLElement，也可以是CSS选择器
        data: {
            message: 'some text'
        }
    });

    // 获取Vue实例关联的对象
    const param = app.$el;
    console.log('end');
</script>
</body>
</html>